name: Terraform Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infra/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para implanta√ß√£o (dev, hom, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - hom
          - prod

env:
  TF_VERSION: 1.0.0
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VAR_FILE: terraform.tfvars

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set environment based on branch
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: |
          cd infra
          terraform fmt -check -recursive

      - name: Copy Environment Variables
        run: |
          cd infra
          cp envs/${{ env.ENVIRONMENT }}/${{ env.TF_VAR_FILE }} .

      - name: Terraform Init
        id: init
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=moodle/${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Validate
        id: validate
        run: |
          cd infra
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          cd infra
          terraform plan -var-file=${{ env.TF_VAR_FILE }} -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  deploy-dev:
    name: Deploy to Dev
    needs: validate
    if: (github.ref == 'refs/heads/develop' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Copy Environment Variables
        run: |
          cd infra
          cp envs/dev/${{ env.TF_VAR_FILE }} .

      - name: Terraform Init
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=moodle/dev/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -var-file=${{ env.TF_VAR_FILE }} -auto-approve

      - name: Output Infrastructure Info
        id: terraform-output
        run: |
          cd infra
          echo "CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_ENV
          echo "ALB_DNS=$(terraform output -raw alb_dns_name)" >> $GITHUB_ENV

      - name: Comment with Deployment Info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Dev Environment Deployed!**
              
              **CloudFront Domain:** ${process.env.CLOUDFRONT_DOMAIN}
              **ALB DNS:** ${process.env.ALB_DNS}
              
              O ambiente de desenvolvimento est√° pronto para testes.`
            })

  deploy-hom:
    name: Deploy to Homologation
    needs: validate
    if: (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-hom]')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'hom' || github.event.inputs.environment == 'homolog')
    runs-on: ubuntu-latest
    environment: hom
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Copy Environment Variables
        run: |
          cd infra
          cp envs/hom/${{ env.TF_VAR_FILE }} .

      - name: Terraform Init
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=moodle/hom/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -var-file=${{ env.TF_VAR_FILE }} -auto-approve

      - name: Output Infrastructure Info
        id: terraform-output
        run: |
          cd infra
          echo "CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_ENV
          echo "ALB_DNS=$(terraform output -raw alb_dns_name)" >> $GITHUB_ENV

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "üöÄ *Novo Deploy em Homologa√ß√£o!*\n*Projeto:* Moodle 5.0\n*CloudFront:* ${{ env.CLOUDFRONT_DOMAIN }}\n*Respons√°vel:* ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-prod:
    name: Deploy to Production
    needs: validate
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-prod]')
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Copy Environment Variables
        run: |
          cd infra
          cp envs/prod/${{ env.TF_VAR_FILE }} .

      - name: Terraform Init
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=moodle/prod/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        id: plan
        run: |
          cd infra
          terraform plan -var-file=${{ env.TF_VAR_FILE }} -no-color -out=tfplan

      - name: Wait for Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ vars.PROD_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Aprova√ß√£o para deploy em Produ√ß√£o"
          issue-body: "Por favor, aprove o deploy da infraestrutura em PRODU√á√ÉO."
          exclude-workflow-initiator-as-approver: false

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply tfplan

      - name: Output Infrastructure Info
        id: terraform-output
        run: |
          cd infra
          echo "CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_ENV
          echo "ALB_DNS=$(terraform output -raw alb_dns_name)" >> $GITHUB_ENV

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "üöÄ *Novo Deploy em Produ√ß√£o!*\n*Projeto:* Moodle 5.0\n*CloudFront:* ${{ env.CLOUDFRONT_DOMAIN }}\n*Respons√°vel:* ${{ github.actor }}\n*Aprovado por:* ${{ github.event.approversIds }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}