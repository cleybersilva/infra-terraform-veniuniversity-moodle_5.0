name: Rotate Credentials

on:
  schedule:
    # Executar a cada 30 dias √† meia-noite (UTC)
    - cron: '0 0 1 * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para rotacionar credenciais (dev, hom, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - hom
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  rotate-credentials:
    name: Rotate Credentials
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.environment)) || fromJSON('["dev", "hom", "prod"]') }}
    environment: ${{ matrix.environment }} 
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate New DB Password
        run: |
          echo "Gerando nova senha para o banco de dados no ambiente ${{ matrix.environment }}..."
          NEW_DB_PASSWORD=$(openssl rand -base64 16)
          echo "DB_PASSWORD=$NEW_DB_PASSWORD" >> $GITHUB_ENV
          
          # Armazenar a nova senha no Secrets Manager da AWS
          aws secretsmanager update-secret --secret-id "moodle/${{ matrix.environment }}/db-password" \
            --secret-string "$NEW_DB_PASSWORD" || \
          aws secretsmanager create-secret --name "moodle/${{ matrix.environment }}/db-password" \
            --description "Moodle DB password for ${{ matrix.environment }}" \
            --secret-string "$NEW_DB_PASSWORD" \
            --tags Key=Environment,Value=${{ matrix.environment }}

      - name: Generate New Admin Password
        run: |
          echo "Gerando nova senha para o administrador do Moodle no ambiente ${{ matrix.environment }}..."
          NEW_ADMIN_PASSWORD=$(openssl rand -base64 16)
          
          # Armazenar a nova senha no Secrets Manager da AWS
          aws secretsmanager update-secret --secret-id "moodle/${{ matrix.environment }}/admin-password" \
            --secret-string "$NEW_ADMIN_PASSWORD" || \
          aws secretsmanager create-secret --name "moodle/${{ matrix.environment }}/admin-password" \
            --description "Moodle admin password for ${{ matrix.environment }}" \
            --secret-string "$NEW_ADMIN_PASSWORD" \
            --tags Key=Environment,Value=${{ matrix.environment }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Update RDS DB Password via Terraform
        run: |
          cd infra
          
          # Copiar arquivo de configura√ß√£o espec√≠fico do ambiente
          cp envs/${{ matrix.environment }}/terraform.tfvars .
          
          # Atualizar arquivo de configura√ß√£o com a nova senha
          sed -i 's/db_password *= *"[^"]*"/db_password = "'"$DB_PASSWORD"'"/' terraform.tfvars
          
          # Inicializar o Terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=moodle/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"
          
          # Aplicar altera√ß√µes
          terraform apply -var-file=terraform.tfvars -auto-approve

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "üîÑ *Rota√ß√£o de Credenciais Conclu√≠da*\n*Ambiente:* ${{ matrix.environment }}\n*Data:* $(date)\n\nAs senhas do banco de dados e do administrador do Moodle foram rotacionadas com sucesso."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-report:
    name: Generate Security Report
    needs: rotate-credentials
    runs-on: ubuntu-latest
    steps:
      - name: Generate Report
        run: |
          DATE=$(date +"%Y-%m-%d")
          
          echo "# Relat√≥rio de Rota√ß√£o de Credenciais" > report.md
          echo "" >> report.md
          echo "Data: $DATE" >> report.md
          echo "" >> report.md
          echo "## Ambientes atualizados" >> report.md
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "- ${{ github.event.inputs.environment }}" >> report.md
          else
            echo "- dev" >> report.md
            echo "- hom" >> report.md
            echo "- prod" >> report.md
          fi
          
          echo "" >> report.md
          echo "## Credenciais rotacionadas" >> report.md
          echo "- Senha do banco de dados RDS" >> report.md
          echo "- Senha do administrador do Moodle" >> report.md
          
          echo "" >> report.md
          echo "## Status" >> report.md
          echo "- ‚úÖ Rota√ß√£o conclu√≠da com sucesso" >> report.md
          
          echo "" >> report.md
          echo "Rota√ß√£o executada por: GitHub Actions (${{ github.workflow }})" >> report.md
          echo "Job ID: ${{ github.run_id }}" >> report.md
          
          echo "Relat√≥rio gerado em: report.md"
          cat report.md

      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: security-credentials-rotation-report
          path: report.md
          retention-days: 90

      - name: Send Email with Report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[Seguran√ßa] Relat√≥rio de Rota√ß√£o de Credenciais do Moodle"
          body: file://report.md
          to: ${{ secrets.SECURITY_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>