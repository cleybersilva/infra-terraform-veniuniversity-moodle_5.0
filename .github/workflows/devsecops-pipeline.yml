name: DevSecOps Multi-Stage Pipeline

on:
  push:
    branches:
      - develop
      - release
      - main
  pull_request:
    branches:
      - develop
      - release
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js # Exemplo para projetos Node.js; substitua conforme necessário
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install # Adapte para sua linguagem/framework (ex.: pip, mvn, etc.)

      - name: Build project
        run: npm run build # Adapte para seu comando de build

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/ # Ajuste conforme a pasta de saída do build

  sast:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep (SAST)
        uses: semgrep/semgrep-action@v1
        with:
          config: p/default # Usa regras padrão; personalize com regras específicas
          publishToken: ${{ secrets.SEMGREP_TOKEN }} # Opcional, para relatórios na nuvem
        env:
          SEMGREP_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Semgrep results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-results.json

  sca:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java # Necessário para Dependency-Check
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run OWASP Dependency-Check (SCA)
        uses: dependency-check/Dependency-Check_Action@v4
        with:
          project: 'my-project' # Ajuste o nome do projeto
          path: '.' # Diretório do projeto
          format: 'ALL' # Gera relatórios HTML, JSON e CycloneDX SBOM
          args: '--enableRetired --out dependency-check-report'

      - name: Upload Dependency-Check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report/

  dependency-track:
    runs-on: ubuntu-latest
    needs: sca
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Dependency-Check SBOM
        uses: actions/download-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report/

      - name: Submit SBOM to OWASP Dependency-Track
        run: |
          curl -X "POST" "${{ secrets.DEPENDENCY_TRACK_URL }}/api/v1/bom" \
            -H "Content-Type: multipart/form-data" \
            -H "X-Api-Key: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}" \
            -F "projectName=my-project" \
            -F "projectVersion=1.0" \
            -F "bom=@dependency-check-report/dependency-check-report.xml"
        env:
          DEPENDENCY_TRACK_URL: ${{ secrets.DEPENDENCY_TRACK_URL }}

      - name: Upload Dependency-Track submission log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-track-log
          path: dependency-track-submission.log

  dast:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: Start application # Exemplo: inicia um servidor web para testes
        run: |
          npm install -g serve
          serve -s dist -p 8080 &
          sleep 10 # Aguarda o servidor iniciar

      - name: Run OWASP ZAP (DAST)
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:8080' # Ajuste para a URL da sua aplicação
          fail_action: true # Falha a pipeline se vulnerabilidades críticas forem encontradas
          cmd_options: '-I -j' # Ignora falsos positivos e gera relatório JSON

      - name: Upload ZAP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.json

  nist-compliance:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenSCAP
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenscap8

      - name: Download NIST SCAP content
        run: |
          wget https://nvd.nist.gov/feeds/xml/scap/2.0/nist-scap-release-2-0.xml -O nist-scap.xml

      - name: Run OpenSCAP scan
        run: |
          oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_nist_800_53 \
            --results nist-results.xml \
            --report nist-report.html \
            nist-scap.xml
        continue-on-error: true # Continua mesmo se houver falhas, para gerar relatórios

      - name: Upload OpenSCAP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nist-report
          path: nist-report.html

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [sast, sca, dependency-track, dast]
    if: github.ref == 'refs/heads/develop'
    environment: Development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: Deploy to Dev # Exemplo: implantação em um serviço fictício
        run: |
          echo "Deploying to Development environment"
          # Adapte para seu provedor (AWS, Azure, etc.)
          # Exemplo: aws s3 sync dist/ s3://my-dev-bucket/

  deploy-qa:
    runs-on: ubuntu-latest
    needs: [sast, sca, dependency-track, dast, nist-compliance]
    if: github.ref == 'refs/heads/release'
    environment: QA
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: Deploy to QA
        run: |
          echo "Deploying to QA environment"
          # Adapte para seu provedor
          # Exemplo: az webapp deploy --resource-group my-group --name my-qa-app

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [sast, sca, dependency-track, dast, nist-compliance]
    if: github.ref == 'refs/heads/main'
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: Manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: owner # Substitua pelo usuário ou grupo apropriado
          minimum-approvals: 1

      - name: Deploy to Prod
        run: |
          echo "Deploying to Production environment"
          # Adapte para seu provedor
          # Exemplo: gcloud app deploy dist/app.yaml